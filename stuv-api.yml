openapi: 3.0.0
info:
  version: '0.1.0'
  title: 'StuV API'
  description: 'The API of the StuV. This is not an official schema!'
  
servers:
  - url: 'https://api.stuv.app'
  
paths:
  /rapla/courses:
    get:
      operationId: getCourses
      summary: 'Gets all known courses'
      parameters: []
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                type: array
                description: 'A list of all known courses'
                items:
                  type: string
                  description: 'The course name'
                  example: 'MOS-TINF19A'
  /rapla/lectures/{courses}:
    get:
      operationId: getLectures
      summary: 'Gets the lectures for the given courses'
      parameters:
        - in: path
          name: courses
          description: 'The courses to query for. Unknown courses will be ignored.'
          example: 'MOS-TINF19A,MOS-TINF19B'
          required: true
          schema:
            type: array
            items:
              type: string
            minItems: 1
        - $ref: '#/components/parameters/archivedParam'
        
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lecture'
  /rapla/lectures:
    get:
      operationId: getAllLectures
      summary: 'Gets all lectures of all courses'
      description: 'Lectures that multiple courses attend are present multiple times'
      parameters:
        - $ref: '#/components/parameters/archivedParam'
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lecture'
  /sync/latest:
    get:
      operationId: getLatestSyncs
      summary: 'Get the latest sync operations'
      parameters:
        - in: query
          name: amount
          description: 'The maximum amount of syncs to query for'
          schema:
            type: integer
            default: 10
        - in: query
          name: skip
          description: 'A number of syncs to skip, counting from the latest ones'
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SyncOverview'
  /sync/{syncId}:
    get:
      operationId: getSync
      summary: 'Get the sync data'
      parameters:
        - in: path
          name: syncId
          description: 'The sync id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sync'
                
components:
  securitySchemes: {}
  parameters:
    archivedParam:
      in: query
      name: archived
      description: 'Whether past lectures should be included'
      schema:
        type: boolean
        default: false
      
  schemas:
    Lecture:
      description: |
        Data for a lecture.
        A "lecture" may be an actual lecture, an exam or a holiday
      properties:
        id:
          type: integer
          description: 'The unique id of the given lecture'
        date:
          type: string
          format: "date-time"
          description: 'The date of the lecture, given as ISO date-time'
        startTime:
          type: string
          format: "date-time"
          description: 'The begin time of the lecture, given as ISO date-time'
        endTime:
          type: string
          format: "date-time"
          description: 'The end time of the lecture, given as ISO date-time'
        name:
          type: string
          description: 'The title of the lecture'
        type:
          type: string
          description: 'Whether the lecture is online or in presence'
          enum:
            - 'ONLINE'
            - 'PRESENCE'
        lecturer:
          type: string
          description: |
            May be an actual comma-separated list of lecturers.
            Currently unused because lecturers are now longer provided by the official backend.
        rooms:
          type: array
          description: |
            An array of rooms or locations where the lecture will be happening.
            For online lectures, this will usually contain some kind of 'Online-Vorlesung'.
          items:
            type: string
        course:
          type: string
          description: |
            The course that this lecture is registered for.
            In the official backend multiple courses may attend the same lecture.
            This is not reflected in this API!
            Such lectures will be duplicated for each course.
            
    SyncOverview:
      description: 'An overview over the sync information'
      properties:
        startTime:
          type: string
          format: "date-time"
          description: 'When the sync process was started, given as ISO date-time'
        endTime:
          type: string
          format: "date-time"
          description: 'When the sync process ended, given as ISO date-time'
        status:
          type: string
          description: |
            The status of this sync.
            `success` for successful syncs
        id:
          type: integer
          description: 'The id of the sync. Used to request full sync information.'
        updatedCount:
          type: integer
          description: 'The number of changed lectures'
        newCount:
          type: integer
          description: 'The number of added lectures'
        removedCount:
          type: integer
          description: 'The number of removed lectures'
        hasChanges:
          type: boolean
          description: 'Whether any changes (create/remove/update) took place'
          
    ChangeInfo:
      description: 'Describes a changed field on a lecture'
      properties:
        fieldName:
          type: string
          description: 'The name of the field on the lecture'
        fieldType:
          type: string
          description: 'The type of the field'
          enum:
            - string
            - integer
        previousValue:
          type: string
          description: 'The old value'
        value:
          type: string
          description: 'The new value'
        id:
          type: integer
          description: 'The id of the field change'
          
    LectureUpdate:
      description: 'Describes changes to a lecture'
      properties:
        id:
          type: integer
          description: 'The id of the update'
        lecture:
          description: 'The old lecture record. Changes are not applied yet!'
          allOf:
            - $ref: '#/components/schemas/Lecture'
        changeInfos:
          type: array
          description: 'A list of changes to fields'
          items:
            $ref: '#/components/schemas/ChangeInfo'
            
    Sync:
      properties:
        startTime:
          type: string
          format: "date-time"
          description: 'When the sync process was started, given as ISO date-time'
        endTime:
          type: string
          format: "date-time"
          description: 'When the sync process ended, given as ISO date-time'
        status:
          type: string
          description: |
            The status of this sync.
            `success` for successful syncs
        id:
          type: integer
          description: 'The id of the sync. Used to request full sync information.'
        newLectures:
          type: array
          description: 'New lectures that have been created'
          items:
            $ref: '#/components/schemas/Lecture'
        updatedLectures:
          type: array
          description: 'Lectures that had changes'
          items:
            $ref: '#/components/schemas/LectureUpdate'
        removedLectures:
          type: array
          description: 'Lectures that were removed'
          items:
            $ref: '#/components/schemas/Lecture'
